{"version":3,"file":"answervalidation.min.js","sources":["../src/answervalidation.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * On-the-fly validation for student input to Formulas questions.\n *\n * @module     qtype_formulas/answervalidation\n * @copyright  2025 Philipp Imhof\n * @author     Philipp Imhof\n * @license    https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {call as fetchMany} from 'core/ajax';\nimport {latexify} from 'qtype_formulas/latexify';\nimport {notifyFilterContentUpdated} from 'core_filters/events';\nimport {eventTypes as filterEventTypes} from 'core_filters/events';\n\n/**\n * Array to store all pending timers, allowing to reset / cancel them.\n */\nvar timers = [];\n\n/**\n * Delay (in milliseconds) before sending the current input of a field to validation.\n */\nconst DELAY = 200;\n\n/**\n * Initialisation, i. e. attaching event handlers to the input fields.\n */\nexport const init = () => {\n    // We will trigger MathJax to make sure it is initialized very early.\n    if (typeof window.MathJax === 'undefined') {\n        forceInitMathJax();\n    }\n\n    let inputs = document.getElementsByTagName('input');\n    for (let input of inputs) {\n        // First make sure the input belongs to our qtype. We only have text fields and\n        // they all have a 'formulas_' class, e. g. 'formulas_number_unit'.\n        if (input.type !== 'text' || !input.className.match('formulas_')) {\n            continue;\n        }\n\n        // Also, we do not currently validate unit fields.\n        if (input.dataset.answertype == 'unit') {\n            continue;\n        }\n\n        // Attach event listener for the input event.\n        input.addEventListener('input', setDebounceTimer);\n    }\n\n    // If we have a recent version of Moodle, the MathJax filter will notify us when our LaTex is\n    // rendered.\n    if (typeof filterEventTypes.filterContentRenderingComplete !== 'undefined') {\n        document.addEventListener(filterEventTypes.filterContentRenderingComplete, handleRenderingComplete);\n    }\n\n    // FIXME: maybe add focus event to show rendered mathjax when the field gains focus again (if not empty)\n    // --> do not remove the div, but rather just hide it until we first use it for another field, then delete and recreate\n\n};\n\nconst forceInitMathJax = () => {\n    if (typeof window.MathJax === 'undefined') {\n        notifyFilterContentUpdated(document.querySelector('body'));\n        setTimeout(forceInitMathJax, 200);\n    } else {\n        window.MathJax.Hub.Register.MessageHook('New Math', handleRenderingComplete);\n    }\n};\n\nconst handleRenderingComplete = (evt) => {\n    // For older Moodle versions, we get an array of two strings. The first string\n    // is just 'New Math' (message type), the second is 'MathJax-Element-xxx' indicating\n    // the name of the new element.\n    if (Array.isArray(evt)) {\n        let id = evt[1];\n        let span = document.querySelector(`span#${id}-Frame`);\n        let width = span.getBoundingClientRect().width;\n        window.console.log(width);\n        return;\n    }\n\n    // For more recent versions, we get an event. The nodes will be stored in the array\n    // in evt.detail.nodes.\n    if (evt instanceof CustomEvent) {\n        // evt.detail.nodes -> array of parent nodes (maybe our div?)\n        // child --> querySelector('[id^=MathJax-Element-][id$=Frame]')\n        window.console.log(evt.detail.nodes);\n    }\n    window.console.log(evt);\n};\n\n/**\n * Send student input to the web service for validation and show or hide the warning symbol\n * depending on the result.\n *\n * @param {string} id form field's id\n */\nconst validateStudentAnswer = async(id) => {\n    let field = document.getElementById(id);\n    let symbol = document.getElementById(`warning-${id}`);\n\n    // Empty fields must not be validated and should not have a warning symbol.\n    if (field.value === '') {\n        symbol.style.visibility = 'hidden';\n        return;\n    }\n\n    let pendingPromise = new Pending('qtype_formulas/validatestudentanswer');\n    try {\n        let validationResult = await fetchMany([{\n            methodname: 'qtype_formulas_validate_student_answer',\n            args: {\n                'answer': field.value,\n                'answertype': field.dataset.answertype,\n                'withunit': field.dataset.withunit,\n            },\n        }])[0];\n        symbol.style.visibility = (validationResult ? 'hidden' : 'visible');\n        if (validationResult) {\n            let texcode = await latexify(field.value);\n            showMathJax(id, texcode);\n        } else {\n            removeDiv(null);\n        }\n    } catch (err) {\n        Notification.exception(err);\n    }\n\n    pendingPromise.resolve();\n\n    // The event listener will not be added multiple times, because the handler is a named function.\n    // So we do not have to check whether we have already added it or not.\n    field.addEventListener('blur', removeDiv);\n};\n\nconst removeDiv = (evt) => {\n    let div = document.getElementById('qtype_formulas_mathjax_display');\n    if (div !== null) {\n        //div.remove();\n    }\n    if (evt !== null) {\n        evt.target.removeEventListener('blur', removeDiv, false);\n    }\n};\n\nconst showMathJax = (id, texcode) => {\n    let field = document.getElementById(id);\n\n    let div = document.getElementById('qtype_formulas_mathjax_display');\n    if (div === null) {\n        div = document.createElement('div');\n        div.id = 'qtype_formulas_mathjax_display';\n        div.classList.add('filter_mathjaxloader_equation');\n        field.parentNode.insertBefore(div, field.nextSibling);\n    }\n\n    div.innerText = `\\\\(\\\\displaystyle ${texcode} \\\\)`;\n\n    // Tell the MathJax filter that we have added some content to be rendered.\n    notifyFilterContentUpdated(div.parentNode);\n\n\n    return div;\n};\n\n/**\n * Event handler: set or re-initialize timer for a given input field.\n *\n * @param {Event} evt event\n */\nconst setDebounceTimer = (evt) => {\n    // If a timer has already been set, delete it.\n    if (typeof timers[evt.target.id] === 'number') {\n        clearTimeout(timers[evt.target.id]);\n    }\n    // Set timer for given input field.\n    timers[evt.target.id] = setTimeout(validateStudentAnswer, DELAY, evt.target.id);\n};\n\nexport default {init};\n"],"names":["timers","init","window","MathJax","forceInitMathJax","inputs","document","getElementsByTagName","input","type","className","match","dataset","answertype","addEventListener","setDebounceTimer","filterEventTypes","filterContentRenderingComplete","handleRenderingComplete","querySelector","setTimeout","Hub","Register","MessageHook","evt","Array","isArray","id","width","getBoundingClientRect","console","log","CustomEvent","detail","nodes","validateStudentAnswer","async","field","getElementById","symbol","value","style","visibility","pendingPromise","Pending","validationResult","methodname","args","withunit","texcode","showMathJax","removeDiv","err","Notification","exception","resolve","target","removeEventListener","div","createElement","classList","add","parentNode","insertBefore","nextSibling","innerText","clearTimeout"],"mappings":";;;;;;;;kFAkCIA,OAAS,SAUAC,KAAO,UAEc,IAAnBC,OAAOC,SACdC,uBAGAC,OAASC,SAASC,qBAAqB,aACtC,IAAIC,SAASH,OAGK,SAAfG,MAAMC,MAAoBD,MAAME,UAAUC,MAAM,cAKpB,QAA5BH,MAAMI,QAAQC,YAKlBL,MAAMM,iBAAiB,QAASC,uBAK2B,IAApDC,mBAAiBC,gCACxBX,SAASQ,iBAAiBE,mBAAiBC,+BAAgCC,mDAQ7Ed,iBAAmB,UACS,IAAnBF,OAAOC,gDACaG,SAASa,cAAc,SAClDC,WAAWhB,iBAAkB,MAE7BF,OAAOC,QAAQkB,IAAIC,SAASC,YAAY,WAAYL,0BAItDA,wBAA2BM,SAIzBC,MAAMC,QAAQF,UACVG,GAAKH,IAAI,GAETI,MADOtB,SAASa,6BAAsBQ,cACzBE,wBAAwBD,MACzC1B,OAAO4B,QAAQC,IAAIH,YAMnBJ,eAAeQ,aAGf9B,OAAO4B,QAAQC,IAAIP,IAAIS,OAAOC,OAElChC,OAAO4B,QAAQC,IAAIP,MASjBW,sBAAwBC,MAAAA,SACtBC,MAAQ/B,SAASgC,eAAeX,IAChCY,OAASjC,SAASgC,iCAA0BX,QAG5B,KAAhBU,MAAMG,kBACND,OAAOE,MAAMC,WAAa,cAI1BC,eAAiB,IAAIC,iBAAQ,gDAEzBC,uBAAyB,cAAU,CAAC,CACpCC,WAAY,yCACZC,KAAM,QACQV,MAAMG,iBACFH,MAAMzB,QAAQC,oBAChBwB,MAAMzB,QAAQoC,aAE9B,MACJT,OAAOE,MAAMC,WAAcG,iBAAmB,SAAW,UACrDA,iBAAkB,KACdI,cAAgB,sBAASZ,MAAMG,OACnCU,YAAYvB,GAAIsB,cAEhBE,UAAU,MAEhB,MAAOC,KACLC,aAAaC,UAAUF,KAG3BT,eAAeY,UAIflB,MAAMvB,iBAAiB,OAAQqC,YAG7BA,UAAa3B,MACLlB,SAASgC,eAAe,kCAItB,OAARd,KACAA,IAAIgC,OAAOC,oBAAoB,OAAQN,WAAW,IAIpDD,YAAc,CAACvB,GAAIsB,eACjBZ,MAAQ/B,SAASgC,eAAeX,IAEhC+B,IAAMpD,SAASgC,eAAe,yCACtB,OAARoB,MACAA,IAAMpD,SAASqD,cAAc,OAC7BD,IAAI/B,GAAK,iCACT+B,IAAIE,UAAUC,IAAI,iCAClBxB,MAAMyB,WAAWC,aAAaL,IAAKrB,MAAM2B,cAG7CN,IAAIO,sCAAiChB,uDAGVS,IAAII,YAGxBJ,KAQL3C,iBAAoBS,MAEe,iBAA1BxB,OAAOwB,IAAIgC,OAAO7B,KACzBuC,aAAalE,OAAOwB,IAAIgC,OAAO7B,KAGnC3B,OAAOwB,IAAIgC,OAAO7B,IAAMP,WAAWe,sBA3JzB,IA2JuDX,IAAIgC,OAAO7B,kBAGjE,CAAC1B,KAAAA"}