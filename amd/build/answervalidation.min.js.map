{"version":3,"file":"answervalidation.min.js","sources":["../src/answervalidation.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * On-the-fly validation for student input to Formulas questions.\n *\n * @module     qtype_formulas/answervalidation\n * @copyright  2025 Philipp Imhof\n * @author     Philipp Imhof\n * @license    https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {call as fetchMany} from 'core/ajax';\n// import {latexify} from 'qtype_formulas/latexify';\nimport {notifyFilterContentUpdated} from 'core_filters/events';\nimport {eventTypes as filterEventTypes} from 'core_filters/events';\n\n/**\n * Variable to store pending timer, allowing to reset / cancel it.\n */\nvar timer = null;\n\n/**\n * Delay (in milliseconds) before sending the current input of a field to validation.\n */\nconst DELAY = 200;\n\n/**\n * Initialisation, i. e. attaching event handlers to the input fields.\n */\nexport const init = () => {\n    // We will trigger MathJax to make sure it is initialized very early.\n    if (typeof window.MathJax === 'undefined') {\n        forceInitMathJax();\n    }\n\n    let inputs = document.getElementsByTagName('input');\n    for (let input of inputs) {\n        // First make sure the input belongs to our qtype. We only have text fields and\n        // they all have a 'formulas_' class, e. g. 'formulas_number_unit'.\n        if (input.type !== 'text' || !input.className.match('formulas_')) {\n            continue;\n        }\n\n        // Attach event listener for the input event.\n        input.addEventListener('input', setDebounceTimer);\n\n        // Attach event listener for the focus and blur events.\n        input.addEventListener('focus', focusReceived);\n        input.addEventListener('blur', hideMathJax);\n    }\n\n    // If we have a recent version of Moodle, the MathJax filter will notify us when our LaTex is\n    // rendered. Otherwise, we register a legacy callback.\n    if (typeof filterEventTypes.filterContentRenderingComplete !== 'undefined') {\n        document.addEventListener(filterEventTypes.filterContentRenderingComplete, handleRenderingComplete);\n    } else {\n        addLegacyMathJaxListener();\n    }\n};\n\nconst focusReceived = (evt) => {\n    let field = evt.target;\n\n    // If the field is empty, there is nothing to do.\n    if (field.value == '') {\n        return;\n    }\n\n    // If the field is not empty and we already have a MathJax display for this\n    // field, we can simply reactivate it.\n    let div = document.getElementById('qtype_formulas_mathjax_display');\n    if (div !== null && div.dataset.for == field.id) {\n        div.style.visibility = 'visible';\n        return;\n    }\n\n    // In all other cases, we have to process the field's content again and recreate\n    // the MathJax preview.\n    validateStudentAnswer(field.id);\n};\n\nconst forceInitMathJax = () => {\n    if (typeof window.MathJax === 'undefined') {\n        notifyFilterContentUpdated(document.querySelector('body'));\n        setTimeout(forceInitMathJax, 200);\n    }\n};\n\nconst addLegacyMathJaxListener = () => {\n    if (typeof window.MathJax === 'undefined') {\n        setTimeout(addLegacyMathJaxListener, 200);\n    } else {\n        window.MathJax.Hub.Register.MessageHook('New Math', handleRenderingComplete);\n    }\n};\n\nconst handleRenderingComplete = (evt) => {\n    let mathjaxSpan = null;\n\n    // For older Moodle versions, we get an array of two strings. The first string\n    // is just 'New Math' (message type), the second is 'MathJax-Element-xxx' indicating\n    // the name of the new element.\n    // For more recent versions, we get an event. The nodes will be stored in the array\n    // in evt.detail.nodes.\n    if (Array.isArray(evt)) {\n        let id = evt[1];\n        mathjaxSpan = document.querySelector(`span#${id}-Frame`);\n    } else if (evt instanceof CustomEvent) {\n        for (let element of evt.detail.nodes) {\n            // Iterate until we find our preview <div>.\n            if (element.id === 'qtype_formulas_mathjax_display') {\n                mathjaxSpan = document.querySelector('span[id^=MathJax-Element-][id$=Frame]');\n                break;\n            }\n        }\n    }\n    let width = 0;\n    if (mathjaxSpan !== null) {\n        width = mathjaxSpan.getBoundingClientRect().width;\n    }\n    let div = document.getElementById('qtype_formulas_mathjax_display');\n    if (div !== null) {\n        let style = window.getComputedStyle(div);\n        width += 3 * parseInt(style.padding);\n        // The preview should not be larger than the rectangle around the question.\n        width = Math.min(width, div.parentNode.getBoundingClientRect().width);\n        div.style.width = width + 'px';\n    }\n};\n\n/**\n * Send student input to the web service for validation and show or hide the warning symbol\n * depending on the result.\n *\n * @param {string} id form field's id\n */\nconst validateStudentAnswer = async(id) => {\n    let field = document.getElementById(id);\n\n    // Empty fields do not have to be validated and must not be marked as invalid.\n    // If the MathJax preview is currently shown, it must be hidden.\n    if (field.value === '') {\n        field.classList.remove('is-invalid');\n        hideMathJax();\n        return;\n    }\n\n    let pendingPromise = new Pending('qtype_formulas/validatestudentanswer');\n    try {\n        let answertype = field.dataset.answertype;\n        if (answertype === 'unit') {\n            answertype = -1;\n        }\n\n        let validationResult = await fetchMany([{\n            methodname: 'qtype_formulas_validate_student_answer',\n            args: {\n                'answer': field.value,\n                'answertype': answertype,\n                'withunit': (answertype < 0 ? true : field.dataset.withunit),\n            },\n        }])[0];\n        if (validationResult.status === 'success') {\n            field.classList.remove('is-invalid');\n            showMathJax(id, validationResult.detail);\n        } else {\n            field.classList.add('is-invalid');\n            hideMathJax();\n        }\n    } catch (err) {\n        Notification.exception(err);\n    }\n\n    pendingPromise.resolve();\n};\n\nconst hideMathJax = () => {\n    let div = document.getElementById('qtype_formulas_mathjax_display');\n    if (div !== null) {\n        div.style.visibility = 'hidden';\n    }\n};\n\nconst showMathJax = (id, texcode) => {\n    let field = document.getElementById(id);\n\n    // If the field does not have focus anymore, we stop here.\n    if (document.activeElement.id !== id) {\n        return;\n    }\n\n    let div = document.getElementById('qtype_formulas_mathjax_display');\n    // If the div exists, but does not belong to our input field, delete it.\n    if (div !== null && div.dataset.for !== id) {\n        div.remove();\n        div = null;\n    }\n\n    // If there is no div (or no div anymore), create one.\n    if (div === null) {\n        div = document.createElement('div');\n        div.id = 'qtype_formulas_mathjax_display';\n        div.classList.add('filter_mathjaxloader_equation');\n        div.dataset.for = id;\n        div.style.left = field.offsetLeft + 'px';\n        field.parentNode.insertBefore(div, field.nextSibling);\n    }\n\n    div.innerText = `\\\\(\\\\displaystyle ${texcode} \\\\)`;\n    div.style.visibility = 'visible';\n\n    // Tell the MathJax filter that we have added some content to be rendered.\n    notifyFilterContentUpdated(div.parentNode);\n};\n\n/**\n * Event handler: set or re-initialize timer for a given input field.\n *\n * @param {Event} evt event\n */\nconst setDebounceTimer = (evt) => {\n    // If a timer has already been set, delete it.\n    if (typeof timer === 'number') {\n        clearTimeout(timer);\n    }\n    // Set timer for given input field.\n    timer = setTimeout(validateStudentAnswer, DELAY, evt.target.id);\n};\n\nexport default {init};\n"],"names":["timer","init","window","MathJax","forceInitMathJax","inputs","document","getElementsByTagName","input","type","className","match","addEventListener","setDebounceTimer","focusReceived","hideMathJax","filterEventTypes","filterContentRenderingComplete","handleRenderingComplete","addLegacyMathJaxListener","evt","field","target","value","div","getElementById","dataset","for","id","validateStudentAnswer","style","visibility","querySelector","setTimeout","Hub","Register","MessageHook","mathjaxSpan","Array","isArray","CustomEvent","element","detail","nodes","width","getBoundingClientRect","getComputedStyle","parseInt","padding","Math","min","parentNode","async","classList","remove","pendingPromise","Pending","answertype","validationResult","methodname","args","withunit","status","showMathJax","add","err","Notification","exception","resolve","texcode","activeElement","createElement","left","offsetLeft","insertBefore","nextSibling","innerText","clearTimeout"],"mappings":"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"}