{"version":3,"file":"answervalidation.min.js","sources":["../src/answervalidation.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * On-the-fly validation for student input to Formulas questions.\n *\n * @module     qtype_formulas/answervalidation\n * @copyright  2025 Philipp Imhof\n * @author     Philipp Imhof\n * @license    https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {call as fetchMany} from 'core/ajax';\nimport {latexify} from 'qtype_formulas/latexify';\nimport {notifyFilterContentUpdated} from 'core_filters/events';\nimport {eventTypes as filterEventTypes} from 'core_filters/events';\n\n/**\n * Array to store all pending timers, allowing to reset / cancel them.\n */\nvar timers = [];\n\n/**\n * Delay (in milliseconds) before sending the current input of a field to validation.\n */\nconst DELAY = 200;\n\n/**\n * Initialisation, i. e. attaching event handlers to the input fields.\n */\nexport const init = () => {\n    // We will trigger MathJax to make sure it is initialized very early.\n    if (typeof window.MathJax === 'undefined') {\n        forceInitMathJax();\n    }\n\n    let inputs = document.getElementsByTagName('input');\n    for (let input of inputs) {\n        // First make sure the input belongs to our qtype. We only have text fields and\n        // they all have a 'formulas_' class, e. g. 'formulas_number_unit'.\n        if (input.type !== 'text' || !input.className.match('formulas_')) {\n            continue;\n        }\n\n        // Also, we do not currently validate unit fields.\n        if (input.dataset.answertype == 'unit') {\n            continue;\n        }\n\n        // Attach event listener for the input event.\n        input.addEventListener('input', setDebounceTimer);\n\n        // Attach event listener for the focus and blur events.\n        input.addEventListener('focus', focusReceived);\n        input.addEventListener('blur', focusLost);\n    }\n\n    // If we have a recent version of Moodle, the MathJax filter will notify us when our LaTex is\n    // rendered.\n    if (typeof filterEventTypes.filterContentRenderingComplete !== 'undefined') {\n        document.addEventListener(filterEventTypes.filterContentRenderingComplete, handleRenderingComplete);\n    }\n\n    // on focus: if empty return, if invalid retun, otherwise: render and show preview\n    //  --> if same as last focus, unhide preview, otherwise delete preview and recreate\n\n    // on blur: hide mathjax preview\n\n    // on input: if empty return, if invalid remove jax and show warning, if valid remove warning and show jax\n};\n\nconst focusReceived = (evt) => {\n    let field = evt.target;\n    // If the field is empty, there is nothing to do.\n    if (field.value == '') {\n        return;\n    }\n    // If the field is not empty and there already is a MathJax display for this\n    // field, we can simply reactivate ist.\n    let div = document.getElementById('qtype_formulas_mathjax_display');\n    if (div !== null && div.dataset.for == field.id) {\n        div.style.visibility = 'visible';\n        return;\n    }\n    validateStudentAnswer(field.id);\n    // on focus: if empty return, if invalid retun, otherwise: render and show preview\n    //  --> if same as last focus, unhide preview, otherwise delete preview and recreate\n};\n\nconst focusLost = () => {\n    hideMathJax();\n    // on blur: hide mathjax preview, but do not delete\n};\n\nconst forceInitMathJax = () => {\n    if (typeof window.MathJax === 'undefined') {\n        notifyFilterContentUpdated(document.querySelector('body'));\n        setTimeout(forceInitMathJax, 200);\n    } else {\n        window.MathJax.Hub.Register.MessageHook('New Math', handleRenderingComplete);\n    }\n};\n\nconst handleRenderingComplete = (evt) => {\n    let mathjaxSpan = null;\n    // For older Moodle versions, we get an array of two strings. The first string\n    // is just 'New Math' (message type), the second is 'MathJax-Element-xxx' indicating\n    // the name of the new element.\n    // For more recent versions, we get an event. The nodes will be stored in the array\n    // in evt.detail.nodes.\n    if (Array.isArray(evt)) {\n        let id = evt[1];\n        mathjaxSpan = document.querySelector(`span#${id}-Frame`);\n    } else if (evt instanceof CustomEvent) {\n        for (let element of evt.detail.nodes) {\n            // Iterate until we find our preview <div>.\n            if (element.id === 'qtype_formulas_mathjax_display') {\n                mathjaxSpan = document.querySelector('span[id^=MathJax-Element-][id$=Frame]');\n                break;\n            }\n        }\n    }\n    let width = 0;\n    if (mathjaxSpan !== null) {\n        width = mathjaxSpan.getBoundingClientRect().width;\n    }\n    window.console.log(width);\n};\n\n/**\n * Send student input to the web service for validation and show or hide the warning symbol\n * depending on the result.\n *\n * @param {string} id form field's id\n */\nconst validateStudentAnswer = async(id) => {\n    let field = document.getElementById(id);\n\n    // Empty fields must not be validated and should not be marked as invalid.\n    if (field.value === '') {\n        field.classList.remove('is-invalid');\n        return;\n    }\n\n    let pendingPromise = new Pending('qtype_formulas/validatestudentanswer');\n    try {\n        let validationResult = await fetchMany([{\n            methodname: 'qtype_formulas_validate_student_answer',\n            args: {\n                'answer': field.value,\n                'answertype': field.dataset.answertype,\n                'withunit': field.dataset.withunit,\n            },\n        }])[0];\n        if (validationResult) {\n            field.classList.remove('is-invalid');\n            let texcode = await latexify(field.value);\n            showMathJax(id, texcode);\n        } else {\n            field.classList.add('is-invalid');\n            hideMathJax();\n        }\n    } catch (err) {\n        Notification.exception(err);\n    }\n\n    pendingPromise.resolve();\n};\n\nconst hideMathJax = () => {\n    let div = document.getElementById('qtype_formulas_mathjax_display');\n    if (div !== null) {\n        div.style.visibility = 'hidden';\n    }\n};\n\nconst showMathJax = (id, texcode) => {\n    let field = document.getElementById(id);\n\n    // If the field does not have focus anymore, we stop here.\n    if (document.activeElement.id !== id) {\n        return;\n    }\n\n    let div = document.getElementById('qtype_formulas_mathjax_display');\n    // If the div exists, but does not belong to our input field, delete it.\n    if (div !== null && div.dataset.for !== id) {\n        div.remove();\n        div = null;\n        //div.dataset.for = id;\n    }\n    // If there is no div, create one.\n    if (div === null) {\n        div = document.createElement('div');\n        div.id = 'qtype_formulas_mathjax_display';\n        div.classList.add('filter_mathjaxloader_equation');\n        div.dataset.for = id;\n        field.parentNode.insertBefore(div, field.nextSibling);\n    }\n\n    div.style.visibility = 'visible';\n    div.innerText = `\\\\(\\\\displaystyle ${texcode} \\\\)`;\n\n    // Tell the MathJax filter that we have added some content to be rendered.\n    notifyFilterContentUpdated(div.parentNode);\n\n    //return div;\n};\n\n/**\n * Event handler: set or re-initialize timer for a given input field.\n *\n * @param {Event} evt event\n */\nconst setDebounceTimer = (evt) => {\n    // If a timer has already been set, delete it.\n    if (typeof timers[evt.target.id] === 'number') {\n        clearTimeout(timers[evt.target.id]);\n    }\n    // Set timer for given input field.\n    timers[evt.target.id] = setTimeout(validateStudentAnswer, DELAY, evt.target.id);\n};\n\nexport default {init};\n"],"names":["timers","init","window","MathJax","forceInitMathJax","inputs","document","getElementsByTagName","input","type","className","match","dataset","answertype","addEventListener","setDebounceTimer","focusReceived","focusLost","filterEventTypes","filterContentRenderingComplete","handleRenderingComplete","evt","field","target","value","div","getElementById","for","id","validateStudentAnswer","style","visibility","hideMathJax","querySelector","setTimeout","Hub","Register","MessageHook","mathjaxSpan","Array","isArray","CustomEvent","element","detail","nodes","width","getBoundingClientRect","console","log","async","classList","remove","pendingPromise","Pending","methodname","args","withunit","texcode","showMathJax","add","err","Notification","exception","resolve","activeElement","createElement","parentNode","insertBefore","nextSibling","innerText","clearTimeout"],"mappings":";;;;;;;;kFAkCIA,OAAS,SAUAC,KAAO,UAEc,IAAnBC,OAAOC,SACdC,uBAGAC,OAASC,SAASC,qBAAqB,aACtC,IAAIC,SAASH,OAGK,SAAfG,MAAMC,MAAoBD,MAAME,UAAUC,MAAM,cAKpB,QAA5BH,MAAMI,QAAQC,aAKlBL,MAAMM,iBAAiB,QAASC,kBAGhCP,MAAMM,iBAAiB,QAASE,eAChCR,MAAMM,iBAAiB,OAAQG,iBAK4B,IAApDC,mBAAiBC,gCACxBb,SAASQ,iBAAiBI,mBAAiBC,+BAAgCC,mDAW7EJ,cAAiBK,UACfC,MAAQD,IAAIE,UAEG,IAAfD,MAAME,iBAKNC,IAAMnB,SAASoB,eAAe,kCACtB,OAARD,KAAgBA,IAAIb,QAAQe,KAAOL,MAAMM,GAI7CC,sBAAsBP,MAAMM,IAHxBH,IAAIK,MAAMC,WAAa,WAQzBd,UAAY,KACde,eAIE5B,iBAAmB,UACS,IAAnBF,OAAOC,gDACaG,SAAS2B,cAAc,SAClDC,WAAW9B,iBAAkB,MAE7BF,OAAOC,QAAQgC,IAAIC,SAASC,YAAY,WAAYjB,0BAItDA,wBAA2BC,UACzBiB,YAAc,QAMdC,MAAMC,QAAQnB,KAAM,KAChBO,GAAKP,IAAI,GACbiB,YAAchC,SAAS2B,6BAAsBL,mBAC1C,GAAIP,eAAeoB,gBACjB,IAAIC,WAAWrB,IAAIsB,OAAOC,SAER,mCAAfF,QAAQd,GAAyC,CACjDU,YAAchC,SAAS2B,cAAc,mDAK7CY,MAAQ,EACQ,OAAhBP,cACAO,MAAQP,YAAYQ,wBAAwBD,OAEhD3C,OAAO6C,QAAQC,IAAIH,QASjBhB,sBAAwBoB,MAAAA,SACtB3B,MAAQhB,SAASoB,eAAeE,OAGhB,KAAhBN,MAAME,kBACNF,MAAM4B,UAAUC,OAAO,kBAIvBC,eAAiB,IAAIC,iBAAQ,qDAEA,cAAU,CAAC,CACpCC,WAAY,yCACZC,KAAM,QACQjC,MAAME,iBACFF,MAAMV,QAAQC,oBAChBS,MAAMV,QAAQ4C,aAE9B,GACkB,CAClBlC,MAAM4B,UAAUC,OAAO,kBACnBM,cAAgB,sBAASnC,MAAME,OACnCkC,YAAY9B,GAAI6B,cAEhBnC,MAAM4B,UAAUS,IAAI,cACpB3B,cAEN,MAAO4B,KACLC,aAAaC,UAAUF,KAG3BR,eAAeW,WAGb/B,YAAc,SACZP,IAAMnB,SAASoB,eAAe,kCACtB,OAARD,MACAA,IAAIK,MAAMC,WAAa,WAIzB2B,YAAc,CAAC9B,GAAI6B,eACjBnC,MAAQhB,SAASoB,eAAeE,OAGhCtB,SAAS0D,cAAcpC,KAAOA,cAI9BH,IAAMnB,SAASoB,eAAe,kCAEtB,OAARD,KAAgBA,IAAIb,QAAQe,MAAQC,KACpCH,IAAI0B,SACJ1B,IAAM,MAIE,OAARA,MACAA,IAAMnB,SAAS2D,cAAc,OAC7BxC,IAAIG,GAAK,iCACTH,IAAIyB,UAAUS,IAAI,iCAClBlC,IAAIb,QAAQe,IAAMC,GAClBN,MAAM4C,WAAWC,aAAa1C,IAAKH,MAAM8C,cAG7C3C,IAAIK,MAAMC,WAAa,UACvBN,IAAI4C,sCAAiCZ,uDAGVhC,IAAIyC,aAU7BnD,iBAAoBM,MAEe,iBAA1BrB,OAAOqB,IAAIE,OAAOK,KACzB0C,aAAatE,OAAOqB,IAAIE,OAAOK,KAGnC5B,OAAOqB,IAAIE,OAAOK,IAAMM,WAAWL,sBAnMzB,IAmMuDR,IAAIE,OAAOK,kBAGjE,CAAC3B,KAAAA"}