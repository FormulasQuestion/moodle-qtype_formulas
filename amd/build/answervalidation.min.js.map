{"version":3,"file":"answervalidation.min.js","sources":["../src/answervalidation.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * On-the-fly validation for student input to Formulas questions.\n *\n * @module     qtype_formulas/answervalidation\n * @copyright  2025 Philipp Imhof\n * @author     Philipp Imhof\n * @license    https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {call as fetchMany} from 'core/ajax';\nimport {notifyFilterContentUpdated} from 'core_filters/events';\nimport {eventTypes as filterEventTypes} from 'core_filters/events';\n\n/**\n * Variable to store pending timer, allowing to reset / cancel it.\n */\nvar timer = null;\n\n/**\n * Delay (in milliseconds) before sending the current input of a field to validation.\n */\nconst DELAY = 250;\n\n/**\n * Initialisation, i. e. attaching event handlers to the input fields and making sure MathJax\n * is ready.\n */\nexport const init = () => {\n    // We will trigger MathJax to make sure it is initialized very early.\n    if (typeof window.MathJax === 'undefined') {\n        forceInitMathJax();\n    }\n\n    // Attach event listener for the input, focus and blur events for all our answer fields.\n    let inputs = document.querySelectorAll(\"input[type='text'][class*='formulas_'],input[type='text'][id*='_postunit_']\");\n    for (let input of inputs) {\n        input.addEventListener('input', setDebounceTimer);\n        input.addEventListener('focus', focusReceived);\n        input.addEventListener('blur', hideMathJax);\n    }\n\n    // If we have a recent version of Moodle (4.3 and newer), the MathJax filter will notify us when our\n    // LaTex is rendered. Otherwise, we register a legacy callback.\n    if (typeof filterEventTypes.filterContentRenderingComplete !== 'undefined') {\n        document.addEventListener(filterEventTypes.filterContentRenderingComplete, handleRenderingComplete);\n    } else {\n        addLegacyMathJaxListener();\n    }\n};\n\n/**\n * Event handler when input field receives focus.\n *\n * @param {Event} evt event with details\n * @returns void\n */\nconst focusReceived = (evt) => {\n    const field = evt.target;\n\n    // If the field is empty, there is nothing to do.\n    if (field.value.trim() == '') {\n        return;\n    }\n\n    // If the field is not empty, not invalid and we already have a MathJax display for this field,\n    // we can simply reactivate it.\n    const div = document.getElementById('qtype_formulas_mathjax_display');\n    if (!field.classList.contains('is-invalid') && div !== null && div.dataset.for == field.id) {\n        div.style.visibility = 'visible';\n        return;\n    }\n\n    // In all other cases, we have to process the field's content again and recreate\n    // the MathJax preview.\n    validateStudentAnswer(field.id);\n};\n\n/**\n * Make sure MathJax is properly initialized. If the page contains MathJax content, e. g. in the question\n * text, this will happen automatically. However, we might have a page with no other MathJax content and\n * in this case, MathJax has just been loaded, but is not ready to typeset content.\n */\nconst forceInitMathJax = () => {\n    if (typeof window.MathJax === 'undefined') {\n        notifyFilterContentUpdated(document.querySelector('body'));\n        setTimeout(forceInitMathJax, 200);\n    }\n};\n\n/**\n * This function is only needed in Moodle versions prior to 4.3. It registers a callback in the\n * MathJax Hub in order to auto-resize our MathJax preview once the rendering is complete.\n */\nconst addLegacyMathJaxListener = () => {\n    // If MathJax is not ready yet, retry in a moment.\n    if (typeof window.MathJax === 'undefined') {\n        setTimeout(addLegacyMathJaxListener, 200);\n    } else {\n        window.MathJax.Hub.Register.MessageHook('New Math', handleRenderingComplete);\n    }\n};\n\n/**\n * Fetch the element containing the rendered MathJax, according to the MathJax version being\n * used.\n *\n * @param {Element} element DOM element where the MathJax was rendered\n * @returns Element\n */\nconst getMathJaxContainer = (element) => {\n    // If we are using MathJax v3, the rendered output is in a custom <mjx-container> tag.\n    // If we are using MathJax v2, the rendered output is in a <span> with a certain id.\n    let v3container = element.querySelector('mjx-container');\n    let v2container = element.querySelector(\"span[id^='MathJax-Element-'][id$='Frame']\");\n\n    return v3container || v2container;\n};\n\n/**\n * Once MathJax rendering is complete, we can find the width of the rendered content and adjust\n * our preview div's width accordingly.\n *\n * @param {Event|Array} evt event with details or array of two strings\n */\nconst handleRenderingComplete = (evt) => {\n    let mathjaxSpan = null;\n\n    // For older Moodle versions (prior to 4.3), we get an array of two strings. The first string\n    // is just 'New Math' (message type), the second is 'MathJax-Element-xxx' indicating the name\n    // of the new element. For more recent versions, we get a CustomEvent. The nodes will be stored in\n    // the array in evt.detail.nodes.\n    if (Array.isArray(evt)) {\n        let id = evt[1];\n        mathjaxSpan = document.querySelector(`span#${id}-Frame`);\n    } else if (evt instanceof CustomEvent) {\n        for (let element of evt.detail.nodes) {\n            // Iterate until we find our preview <div>.\n            if (element.id === 'qtype_formulas_mathjax_display') {\n                mathjaxSpan = getMathJaxContainer(element);\n                break;\n            }\n        }\n    }\n\n    // Fetch the width from MathJax' <span> via the bounding rectangle.\n    let width = 0;\n    if (mathjaxSpan !== null) {\n        width = mathjaxSpan.getBoundingClientRect().width;\n    }\n\n    // Now fetch our preview <div> and set its width. We must account for the padding and\n    // want to make sure that the preview is not larger than the rectangle around the question\n    // itself.\n    let div = document.getElementById('qtype_formulas_mathjax_display');\n    if (div !== null) {\n        let style = window.getComputedStyle(div);\n        width += 3 * parseInt(style.padding);\n        width = Math.min(width, div.parentNode.getBoundingClientRect().width);\n        div.style.width = width + 'px';\n    }\n};\n\n/**\n * Send student input to the web service for validation and show or hide the warning symbol\n * depending on the result.\n *\n * @param {string} id form field's id\n */\nconst validateStudentAnswer = async(id) => {\n    let field = document.getElementById(id);\n\n    // Empty fields do not have to be validated and must not be marked as invalid.\n    // If the MathJax preview is currently shown, it must be hidden.\n    if (field.value.trim() === '') {\n        field.classList.remove('is-invalid');\n        hideMathJax();\n        return;\n    }\n\n    // Send the input to the appropriate webservice.\n    let pendingPromise = new Pending('qtype_formulas/validateanswer');\n    try {\n        let method, args;\n        if (field.dataset.answertype === 'unit' || field.id.includes('_postunit_')) {\n            method = 'qtype_formulas_validate_unit';\n            args = {'unit': field.value};\n        } else {\n            method = 'qtype_formulas_validate_student_answer';\n            args = {\n                'answer': field.value,\n                'answertype': field.dataset.answertype,\n                'withunit': field.dataset.withunit,\n            };\n        }\n        // The result will have a 'status' field ('success' or 'error') and a 'detail' field\n        // containing either the error message or the LaTeX code.\n        let validationResult = await fetchMany([{methodname: method, args: args}])[0];\n        if (validationResult.status === 'success') {\n            field.classList.remove('is-invalid');\n            showMathJax(id, validationResult.detail);\n        } else {\n            field.classList.add('is-invalid');\n            hideMathJax();\n        }\n    } catch (err) {\n        Notification.exception(err);\n    }\n    pendingPromise.resolve();\n};\n\n/**\n * Function to hide our MathJax preview <div>.\n */\nconst hideMathJax = () => {\n    let div = document.getElementById('qtype_formulas_mathjax_display');\n    if (div !== null) {\n        div.style.visibility = 'hidden';\n    }\n};\n\n/**\n * Render LaTeX code and show the preview <div> at the right place.\n *\n * @param {string} id the input field's id\n * @param {*} texcode LaTeX code to be rendered and shown\n * @returns void\n */\nconst showMathJax = (id, texcode) => {\n    let field = document.getElementById(id);\n\n    // If the field does not have focus anymore, we stop here.\n    if (document.activeElement.id !== id) {\n        return;\n    }\n\n    // If the field contains only a simple number (i. e. not in scientific notation) or\n    // a simple unit (i. e. one unit with no exponent), there is no need to show the MathJax\n    // rendering.\n    if (field.value.match(/^([A-Za-z]+|[0-9]*\\.?[0-9]*)$/)) {\n        hideMathJax();\n        return;\n    }\n\n    // If the div exists, but does not belong to our input field, delete it.\n    let div = document.getElementById('qtype_formulas_mathjax_display');\n    if (div !== null && div.dataset.for !== id) {\n        div.remove();\n        div = null;\n    }\n\n    // If there is no div (we might just have deleted it or it might not have existed at all), create one.\n    if (div === null) {\n        div = document.createElement('div');\n        div.id = 'qtype_formulas_mathjax_display';\n        div.classList.add('filter_mathjaxloader_equation');\n        div.dataset.for = id;\n        div.style.left = field.offsetLeft + 'px';\n        // We insert the div right after the relevant input field.\n        field.parentNode.insertBefore(div, field.nextSibling);\n    }\n\n    // Copy the LaTeX code into the div, show it and tell the MathJax filter that there is work to be done.\n    div.innerText = `\\\\(\\\\displaystyle ${texcode} \\\\)`;\n    div.style.visibility = 'visible';\n    notifyFilterContentUpdated(div.parentNode);\n};\n\n/**\n * Event handler: set or re-initialize timer for a given input field.\n *\n * @param {Event} evt event with details\n */\nconst setDebounceTimer = (evt) => {\n    // If a timer has already been set, delete it.\n    if (typeof timer === 'number') {\n        clearTimeout(timer);\n    }\n    // Set timer for given input field.\n    timer = setTimeout(validateStudentAnswer, DELAY, evt.target.id);\n};\n\nexport default {init};\n"],"names":["timer","init","window","MathJax","forceInitMathJax","inputs","document","querySelectorAll","input","addEventListener","setDebounceTimer","focusReceived","hideMathJax","filterEventTypes","filterContentRenderingComplete","handleRenderingComplete","addLegacyMathJaxListener","evt","field","target","value","trim","div","getElementById","classList","contains","dataset","for","id","validateStudentAnswer","style","visibility","querySelector","setTimeout","Hub","Register","MessageHook","getMathJaxContainer","element","v3container","v2container","mathjaxSpan","Array","isArray","CustomEvent","detail","nodes","width","getBoundingClientRect","getComputedStyle","parseInt","padding","Math","min","parentNode","async","remove","pendingPromise","Pending","method","args","answertype","includes","withunit","validationResult","methodname","status","showMathJax","add","err","Notification","exception","resolve","texcode","activeElement","match","createElement","left","offsetLeft","insertBefore","nextSibling","innerText","clearTimeout"],"mappings":";;;;;;;;kFAiCIA,MAAQ,WAWCC,KAAO,UAEc,IAAnBC,OAAOC,SACdC,uBAIAC,OAASC,SAASC,iBAAiB,mFAClC,IAAIC,SAASH,OACdG,MAAMC,iBAAiB,QAASC,kBAChCF,MAAMC,iBAAiB,QAASE,eAChCH,MAAMC,iBAAiB,OAAQG,kBAK4B,IAApDC,mBAAiBC,+BACxBR,SAASG,iBAAiBI,mBAAiBC,+BAAgCC,yBAE3EC,qDAUFL,cAAiBM,YACbC,MAAQD,IAAIE,UAGQ,IAAtBD,MAAME,MAAMC,oBAMVC,IAAMhB,SAASiB,eAAe,kCAC/BL,MAAMM,UAAUC,SAAS,eAAyB,OAARH,KAAgBA,IAAII,QAAQC,KAAOT,MAAMU,GAOxFC,sBAAsBX,MAAMU,IANxBN,IAAIQ,MAAMC,WAAa,WAczB3B,iBAAmB,UACS,IAAnBF,OAAOC,iDACaG,SAAS0B,cAAc,SAClDC,WAAW7B,iBAAkB,OAQ/BY,yBAA2B,UAEC,IAAnBd,OAAOC,QACd8B,WAAWjB,yBAA0B,KAErCd,OAAOC,QAAQ+B,IAAIC,SAASC,YAAY,WAAYrB,0BAWtDsB,oBAAuBC,cAGrBC,YAAcD,QAAQN,cAAc,iBACpCQ,YAAcF,QAAQN,cAAc,oDAEjCO,aAAeC,aASpBzB,wBAA2BE,UACzBwB,YAAc,QAMdC,MAAMC,QAAQ1B,KAAM,KAChBW,GAAKX,IAAI,GACbwB,YAAcnC,SAAS0B,6BAAsBJ,mBAC1C,GAAIX,eAAe2B,gBACjB,IAAIN,WAAWrB,IAAI4B,OAAOC,SAER,mCAAfR,QAAQV,GAAyC,CACjDa,YAAcJ,oBAAoBC,mBAO1CS,MAAQ,EACQ,OAAhBN,cACAM,MAAQN,YAAYO,wBAAwBD,WAM5CzB,IAAMhB,SAASiB,eAAe,qCACtB,OAARD,IAAc,KACVQ,MAAQ5B,OAAO+C,iBAAiB3B,KACpCyB,OAAS,EAAIG,SAASpB,MAAMqB,SAC5BJ,MAAQK,KAAKC,IAAIN,MAAOzB,IAAIgC,WAAWN,wBAAwBD,OAC/DzB,IAAIQ,MAAMiB,MAAQA,MAAQ,OAU5BlB,sBAAwB0B,MAAAA,SACtBrC,MAAQZ,SAASiB,eAAeK,OAIT,KAAvBV,MAAME,MAAMC,cACZH,MAAMM,UAAUgC,OAAO,mBACvB5C,kBAKA6C,eAAiB,IAAIC,iBAAQ,yCAEzBC,OAAQC,KACqB,SAA7B1C,MAAMQ,QAAQmC,YAAyB3C,MAAMU,GAAGkC,SAAS,eACzDH,OAAS,+BACTC,KAAO,MAAS1C,MAAME,SAEtBuC,OAAS,yCACTC,KAAO,QACO1C,MAAME,iBACFF,MAAMQ,QAAQmC,oBAChB3C,MAAMQ,QAAQqC,eAK9BC,uBAAyB,cAAU,CAAC,CAACC,WAAYN,OAAQC,KAAMA,QAAQ,GAC3C,YAA5BI,iBAAiBE,QACjBhD,MAAMM,UAAUgC,OAAO,cACvBW,YAAYvC,GAAIoC,iBAAiBnB,UAEjC3B,MAAMM,UAAU4C,IAAI,cACpBxD,eAEN,MAAOyD,KACLC,aAAaC,UAAUF,KAE3BZ,eAAee,WAMb5D,YAAc,SACZU,IAAMhB,SAASiB,eAAe,kCACtB,OAARD,MACAA,IAAIQ,MAAMC,WAAa,WAWzBoC,YAAc,CAACvC,GAAI6C,eACjBvD,MAAQZ,SAASiB,eAAeK,OAGhCtB,SAASoE,cAAc9C,KAAOA,aAO9BV,MAAME,MAAMuD,MAAM,6CAClB/D,kBAKAU,IAAMhB,SAASiB,eAAe,kCACtB,OAARD,KAAgBA,IAAII,QAAQC,MAAQC,KACpCN,IAAIkC,SACJlC,IAAM,MAIE,OAARA,MACAA,IAAMhB,SAASsE,cAAc,OAC7BtD,IAAIM,GAAK,iCACTN,IAAIE,UAAU4C,IAAI,iCAClB9C,IAAII,QAAQC,IAAMC,GAClBN,IAAIQ,MAAM+C,KAAO3D,MAAM4D,WAAa,KAEpC5D,MAAMoC,WAAWyB,aAAazD,IAAKJ,MAAM8D,cAI7C1D,IAAI2D,sCAAiCR,gBACrCnD,IAAIQ,MAAMC,WAAa,iDACIT,IAAIgC,aAQ7B5C,iBAAoBO,MAED,iBAAVjB,OACPkF,aAAalF,OAGjBA,MAAQiC,WAAWJ,sBAjQT,IAiQuCZ,IAAIE,OAAOS,kBAGjD,CAAC3B,KAAAA"}