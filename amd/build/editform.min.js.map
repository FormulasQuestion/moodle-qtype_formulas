{"version":3,"file":"editform.min.js","sources":["../src/editform.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Helper functions for the form used to create / edit a formulas question.\n *\n * @module     qtype_formulas/editform\n * @copyright  2022 Philipp Imhof\n * @author     Philipp Imhof\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport 'core/config';\n\n/**\n * Default grading criterion according to plugin settings (admin)\n */\nvar defaultCorrectness = '';\n\n/**\n * Number of subquestions (parts)\n */\nvar numberOfParts = 0;\n\nexport const init = (defCorrectness) => {\n    defaultCorrectness = defCorrectness;\n    numberOfParts = document.querySelectorAll('fieldset[id^=id_answerhdr_]').length;\n\n    for (let i = 0; i < numberOfParts; i++) {\n        let textfield = document.getElementById(`id_correctness_${i}`);\n        // Constantly check whether the current grading criterion is simple enough\n        // to allow to switch to simple mode.\n        textfield.addEventListener('input', blockModeSwitcherIfNeeded.bind(null, i));\n\n        // Event listener for the submission of the form (attach only once)\n        if (i === 0) {\n            textfield.form.addEventListener('submit', reenableCriterionTextfields);\n        }\n\n        let checkbox = document.getElementById(`id_correctness_simple_mode_${i}`);\n        checkbox.addEventListener('click', handleGradingCriterionModeSwitcher.bind(null, i));\n\n        // Trigger input event in criterion textfields in order to disable the mode switcher\n        // checkbox, if needed. If the criterion is simple enough, start with simple mode,\n        // unless the form comes back from validation and the textfield is marked as invalid.\n        textfield.dispatchEvent(new Event('input'));\n        if (!checkbox.disabled && !textfield.classList.contains('is-invalid')) {\n            checkbox.checked = true;\n            checkbox.dispatchEvent(new Event('click'));\n        }\n\n        // Always keep the textual form of the grading criterion in sync, because that's\n        // what is going to be submitted in the end.\n        document.getElementById(`id_correctness_simple_type_${i}`).addEventListener(\n            'change', handleSimpleCriterionChanges.bind(null, i)\n        );\n        document.getElementById(`id_correctness_simple_comp_${i}`).addEventListener(\n            'change', handleSimpleCriterionChanges.bind(null, i)\n        );\n        document.getElementById(`id_correctness_simple_tol_${i}`).addEventListener(\n            'change', handleSimpleCriterionChanges.bind(null, i)\n        );\n        document.getElementById(`id_correctness_simple_tol_${i}`).addEventListener(\n            'change', normalizeTolerance\n        );\n    }\n};\n\n/**\n * The textfields containing the grading criterion might be disabled. However, as disabled elements\n * do not submit their value, they have to be enabled before submitting the form.\n */\nconst reenableCriterionTextfields = () => {\n    for (let i = 0; i < numberOfParts; i++) {\n        document.getElementById(`id_correctness_${i}`).disabled = false;\n    }\n};\n\n/**\n * Handle change event for the elements that allow simplified entry of the grading criterion.\n * On each modification, the current criterion is propagated to the (hidden) textbox,\n * that will be used to store the criterion in the database upon submission of the form.\n * @param {number} partNumber number of the part\n */\nconst handleSimpleCriterionChanges = (partNumber) => {\n    let textbox = document.getElementById(`id_correctness_${partNumber}`);\n    textbox.value = convertSimpleCriterionToText(partNumber);\n};\n\n/**\n * Parse the tolerance value into a number and put the value back into the textfield.\n * This allows for immediate simplification and some validation; invalid numbers will be replaced by 0.\n * @param {Event} event Event containing the textfield to be normalized\n */\nconst normalizeTolerance = (event) => {\n    let field = event.target;\n    let tolerance = parseFloat(field.value);\n\n    if (isNaN(tolerance) || !isFinite(tolerance)) {\n        tolerance = 0;\n    }\n\n    field.value = tolerance;\n};\n\n/**\n * Switch between simplified and normal entry mode for the grading criterion.\n * @param {number} partNumber number of the part\n */\nconst handleGradingCriterionModeSwitcher = (partNumber) => {\n    let checkbox = document.getElementById(`id_correctness_simple_mode_${partNumber}`);\n\n    let criterionTextfield = document.getElementById(`id_correctness_${partNumber}`);\n\n    // If not checked anymore, activate expert mode --> convert settings to string and set textfield.\n    if (!checkbox.checked) {\n        criterionTextfield.value = convertSimpleCriterionToText(partNumber);\n        return;\n    }\n\n    // Activate simple mode. If input field is empty, use default value.\n    if (criterionTextfield.value.trim() == '') {\n        criterionTextfield.value = defaultCorrectness;\n    }\n\n    let simpleCriterion = convertTextCriterionToSimple(partNumber);\n    document.getElementById(`id_correctness_simple_type_${partNumber}`).value = simpleCriterion.type;\n    document.getElementById(`id_correctness_simple_comp_${partNumber}`).value = simpleCriterion.comparison;\n    document.getElementById(`id_correctness_simple_tol_${partNumber}`).value = simpleCriterion.tolerance;\n};\n\n/**\n * Convert the simple grading criterion into the corresponding text.\n * @param {number} partNumber number of the part\n * @returns {string} text form of the grading criterion\n */\nconst convertSimpleCriterionToText = (partNumber) => {\n    let typeElement = document.getElementById(`id_correctness_simple_type_${partNumber}`);\n    let comparisonElement = document.getElementById(`id_correctness_simple_comp_${partNumber}`);\n    let toleranceElement = document.getElementById(`id_correctness_simple_tol_${partNumber}`);\n\n    return ['_relerr', '_err'][typeElement.value] + ' '\n        + comparisonElement.options[comparisonElement.value].innerText + ' '\n        + parseFloat(toleranceElement.value);\n};\n\n/**\n * Convert the grading criterion into the simplified form.\n * @param {number} partNumber number of the part\n * @returns {object} criterion the simplified grading criterion\n * @returns {number} criterion.type the type of error (relative or absolute)\n * @returns {number} criterion.comparison the comparison (== or <)\n * @returns {number} criteron.tolerance the tolerance value\n * @throws {TypeError} throws if the value cannot be converted\n */\nconst convertTextCriterionToSimple = (partNumber) => {\n    // Split input into its parts (type, comparison, tolerance).\n    let criterionParts = document.getElementById(`id_correctness_${partNumber}`).value.split(/\\s*(==|<)\\s*/);\n\n    // This should not happen, but it might be better to check anyway.\n    if (criterionParts.length != 3 || !criterionParts[0].match(/^\\s*_(rel)?err\\s*$/)) {\n        throw new TypeError('The given grading criterion cannot be shown in simple mode.');\n    }\n\n    return {\n        'type': ['_relerr', '_err'].indexOf(criterionParts[0]),\n        'comparison': ['==', '<'].indexOf(criterionParts[1]),\n        'tolerance': parseFloat(criterionParts[2])\n    };\n};\n\n/**\n * Check whether the current grading criterion can be converted into the simplified form.\n * If not, disable the checkbox that would allow switching to simple mode.\n * If yes, enable sais checkbox.\n * If the text box is empty, conversion is possible using the default value.\n * @param {number} partNumber number of the part\n */\nconst blockModeSwitcherIfNeeded = (partNumber) => {\n    let criterion = document.getElementById(`id_correctness_${partNumber}`).value.trim();\n    let modeCheckbox = document.getElementById(`id_correctness_simple_mode_${partNumber}`);\n    // If textfield is empty, allow conversion to easy mode\n    if (criterion == '') {\n        modeCheckbox.disabled = false;\n        return;\n    }\n\n    // Value must have exactly three parts: type + comparison + tolerance (number).\n    let criterionParts = criterion.split(/\\s*(==|<)\\s*/);\n    if (criterionParts.length != 3) {\n        modeCheckbox.disabled = true;\n        return;\n    }\n\n    // Type must be _relerr or _err.\n    if (!criterionParts[0].match(/^\\s*_(rel)?err\\s*$/)) {\n        modeCheckbox.disabled = true;\n        return;\n    }\n\n    // Comparison must be == or <.\n    if (!criterionParts[1].match(/\\s*(==|<)\\s*$/)) {\n        modeCheckbox.disabled = true;\n        return;\n    }\n\n    // Tolerance must be a number.\n    let tolerance = parseFloat(criterionParts[2]);\n    // As parseFloat ignores trailing characters, we check for that separately;\n    // we just don't want the tolerance number to contain obviously invalid characters.\n    if (isNaN(tolerance) || !isFinite(tolerance) || criterionParts[2].match(/[^-+0-9.e]/)) {\n        modeCheckbox.disabled = true;\n        return;\n    }\n\n    modeCheckbox.disabled = false;\n};\n\nexport default {init};\n"],"names":["defaultCorrectness","numberOfParts","init","defCorrectness","document","querySelectorAll","length","i","textfield","getElementById","addEventListener","blockModeSwitcherIfNeeded","bind","form","reenableCriterionTextfields","checkbox","handleGradingCriterionModeSwitcher","dispatchEvent","Event","disabled","classList","contains","checked","handleSimpleCriterionChanges","normalizeTolerance","partNumber","value","convertSimpleCriterionToText","event","field","target","tolerance","parseFloat","isNaN","isFinite","criterionTextfield","trim","simpleCriterion","convertTextCriterionToSimple","type","comparison","typeElement","comparisonElement","toleranceElement","options","innerText","criterionParts","split","match","TypeError","indexOf","criterion","modeCheckbox"],"mappings":"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"}